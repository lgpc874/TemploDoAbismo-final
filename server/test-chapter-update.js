import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function testChapterUpdate() {
  try {
    console.log('üîç Testando atualiza√ß√£o de cap√≠tulo...');

    // Buscar um cap√≠tulo existente
    const { data: chapters, error: fetchError } = await supabase
      .from('chapters')
      .select('*')
      .limit(1)
      .single();

    if (fetchError || !chapters) {
      console.error('Nenhum cap√≠tulo encontrado para teste:', fetchError);
      return;
    }

    const originalChapter = chapters;
    console.log('üìñ Cap√≠tulo original:');
    console.log('   ID:', originalChapter.id);
    console.log('   T√≠tulo:', originalChapter.title);
    console.log('   Conte√∫do (primeiros 100 chars):', originalChapter.content.substring(0, 100) + '...');

    // Fazer uma atualiza√ß√£o de teste
    const testTitle = `${originalChapter.title} [TESTE ${Date.now()}]`;
    const testContent = originalChapter.content + '\n\n[TESTE DE ATUALIZA√á√ÉO ADICIONADO EM ' + new Date().toISOString() + ']';

    console.log('\nüîÑ Atualizando cap√≠tulo...');
    const { data: updatedChapter, error: updateError } = await supabase
      .from('chapters')
      .update({
        title: testTitle,
        content: testContent
      })
      .eq('id', originalChapter.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erro ao atualizar:', updateError);
      return;
    }

    console.log('‚úÖ Cap√≠tulo atualizado:');
    console.log('   ID:', updatedChapter.id);
    console.log('   Novo t√≠tulo:', updatedChapter.title);
    console.log('   Conte√∫do atualizado:', updatedChapter.content.includes('TESTE DE ATUALIZA√á√ÉO'));

    // Verificar se a atualiza√ß√£o persistiu lendo novamente
    console.log('\nüîç Verificando persist√™ncia...');
    const { data: verifyChapter, error: verifyError } = await supabase
      .from('chapters')
      .select('*')
      .eq('id', originalChapter.id)
      .single();

    if (verifyError) {
      console.error('‚ùå Erro ao verificar:', verifyError);
      return;
    }

    console.log('üìñ Cap√≠tulo verificado:');
    console.log('   T√≠tulo persistiu:', verifyChapter.title === testTitle);
    console.log('   Conte√∫do persistiu:', verifyChapter.content.includes('TESTE DE ATUALIZA√á√ÉO'));

    // Restaurar cap√≠tulo original
    console.log('\nüîÑ Restaurando cap√≠tulo original...');
    const { error: restoreError } = await supabase
      .from('chapters')
      .update({
        title: originalChapter.title,
        content: originalChapter.content
      })
      .eq('id', originalChapter.id);

    if (restoreError) {
      console.error('‚ùå Erro ao restaurar:', restoreError);
    } else {
      console.log('‚úÖ Cap√≠tulo restaurado ao estado original');
    }

    console.log('\nüéØ RESULTADO: Sistema de atualiza√ß√£o de cap√≠tulos est√° funcionando corretamente no Supabase');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testChapterUpdate();