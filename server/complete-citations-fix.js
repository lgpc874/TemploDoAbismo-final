import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function completeCitationsFix() {
  try {
    console.log('üßπ Limpando TODOS os t√≠tulos dos cap√≠tulos de TODOS os grim√≥rios...');

    // Buscar TODOS os cap√≠tulos
    const { data: chapters, error } = await supabase
      .from('chapters')
      .select('*')
      .order('grimoire_id', { ascending: true })
      .order('chapter_number', { ascending: true });

    if (error) {
      console.error('Erro ao buscar cap√≠tulos:', error);
      return;
    }

    console.log(`üìö Processando ${chapters.length} cap√≠tulos...`);

    let updatedCount = 0;

    // Limpar t√≠tulos de cada cap√≠tulo
    for (const chapter of chapters) {
      let cleanTitle = chapter.title;
      let wasModified = false;

      // Padr√µes mais abrangentes para remover prefixos e formata√ß√µes
      const cleanupPatterns = [
        // Prefixos com tra√ßos
        /^Introdu√ß√£o\s*[-‚Äì‚Äî]\s*/i,
        /^Pr√≥logo\s*[-‚Äì‚Äî]\s*/i,
        /^Cap√≠tulo\s*\d*\s*[-‚Äì‚Äî]\s*/i,
        /^Parte\s*\d*\s*[-‚Äì‚Äî]\s*/i,
        /^Se√ß√£o\s*\d*\s*[-‚Äì‚Äî]\s*/i,
        /^Volume\s*\d*\s*[-‚Äì‚Äî]\s*/i,
        /^Livro\s*\d*\s*[-‚Äì‚Äî]\s*/i,
        /^Abertura\s*[-‚Äì‚Äî]\s*/i,
        /^Prel√∫dio\s*[-‚Äì‚Äî]\s*/i,
        /^Pre√¢mbulo\s*[-‚Äì‚Äî]\s*/i,
        /^Ep√≠logo\s*[-‚Äì‚Äî]\s*/i,
        /^Conclus√£o\s*[-‚Äì‚Äî]\s*/i,
        /^Final\s*[-‚Äì‚Äî]\s*/i,
        /^Encerramento\s*[-‚Äì‚Äî]\s*/i,
        
        // Padr√µes espec√≠ficos encontrados
        /^Invoca√ß√£o\s*[-‚Äì‚Äî]\s*/i,
        /^Selo\s*[-‚Äì‚Äî]\s*/i,
        /^Portal\s*[-‚Äì‚Äî]\s*/i,
        /^Despertar\s*[-‚Äì‚Äî]\s*/i,
        /^Sombras\s*[-‚Äì‚Äî]\s*/i,
        /^Chamado\s*[-‚Äì‚Äî]\s*/i,
        /^Heran√ßa\s*[-‚Äì‚Äî]\s*/i,
        /^Fogo\s*[-‚Äì‚Äî]\s*/i,
        /^Reino\s*[-‚Äì‚Äî]\s*/i,
        /^Chama\s*[-‚Äì‚Äî]\s*/i,
        
        // Padr√µes de numera√ß√£o
        /^I+\s*[-‚Äì‚Äî]\s*/i,
        /^\d+\s*[-‚Äì‚Äî]\s*/,
        /^Primeiro\s*[-‚Äì‚Äî]\s*/i,
        /^Segunda?\s*[-‚Äì‚Äî]\s*/i,
        /^Terceir[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^Quart[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^Quint[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^Sext[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^S√©tim[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^Oitav[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^Non[oa]\s*[-‚Äì‚Äî]\s*/i,
        /^D√©cim[oa]\s*[-‚Äì‚Äî]\s*/i,
        
        // Remover dois pontos iniciais
        /^:\s*/,
        
        // Remover espa√ßos extras e caracteres especiais no in√≠cio
        /^[\s\-‚Äì‚Äî‚Ä¢¬∑]+/
      ];

      // Aplicar limpeza sequencial
      for (const pattern of cleanupPatterns) {
        const beforeClean = cleanTitle;
        cleanTitle = cleanTitle.replace(pattern, '');
        if (beforeClean !== cleanTitle) {
          wasModified = true;
        }
      }

      // Limpar espa√ßos extras e capitalizar primeira letra
      if (wasModified || cleanTitle !== cleanTitle.trim()) {
        cleanTitle = cleanTitle.trim();
        if (cleanTitle.length > 0) {
          cleanTitle = cleanTitle.charAt(0).toUpperCase() + cleanTitle.slice(1);
        }
        wasModified = true;
      }

      // Atualizar no banco se houve modifica√ß√£o
      if (wasModified && cleanTitle !== chapter.title && cleanTitle.length > 0) {
        const { error: updateError } = await supabase
          .from('chapters')
          .update({ title: cleanTitle })
          .eq('id', chapter.id);

        if (updateError) {
          console.error(`Erro ao atualizar cap√≠tulo ${chapter.title}:`, updateError);
        } else {
          console.log(`‚úÖ "${chapter.title}" ‚Üí "${cleanTitle}" (Grim√≥rio: ${chapter.grimoire_id})`);
          updatedCount++;
        }
      }
    }

    console.log(`üî• Limpeza COMPLETA conclu√≠da! ${updatedCount} t√≠tulos de cap√≠tulos atualizados.`);

  } catch (error) {
    console.error('Erro durante limpeza:', error);
  }
}

completeCitationsFix();