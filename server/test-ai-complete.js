import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Configura√ß√£o do OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

async function testCompleteAIGeneration() {
  console.log('üß™ Testando gera√ß√£o completa de grim√≥rio com IA...');

  try {
    // 1. Testar gera√ß√£o de IA
    console.log('üìù Gerando conte√∫do com IA...');
    
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um especialista em textos luciferianos e ocultismo. Crie um grim√≥rio completo e detalhado baseado no prompt fornecido.

          IMPORTANTE: Voc√™ deve criar cap√≠tulos COMPLETOS com t√≠tulo e conte√∫do detalhado para cada um.
          
          Retorne um JSON com a seguinte estrutura:
          {
            "title": "T√≠tulo do grim√≥rio",
            "description": "Descri√ß√£o detalhada do conte√∫do (2-3 par√°grafos)",
            "chapters": [
              {
                "title": "Nome do Cap√≠tulo 1",
                "content": "Conte√∫do completo e detalhado do cap√≠tulo com pelo menos 800-1200 palavras"
              },
              {
                "title": "Nome do Cap√≠tulo 2", 
                "content": "Conte√∫do completo e detalhado do cap√≠tulo com pelo menos 800-1200 palavras"
              }
            ],
            "level": "iniciante|intermediario|avancado",
            "suggested_price": "valor sugerido em reais"
          }
          
          DIRETRIZES DE CONTE√öDO:
          - Cada cap√≠tulo deve ter conte√∫do substancial (800-1200 palavras)
          - Use linguagem m√≠stica, erudita e adequada ao tema luciferiano
          - Inclua s√≠mbolos m√≠sticos, rituais pr√°ticos, filosofia e ensinamentos profundos
          - Estruture o conte√∫do com par√°grafos bem organizados
          - Use formata√ß√£o em HTML quando apropriado (negrito, it√°lico, listas)
          - Inclua cita√ß√µes em latim quando relevante
          - Crie pelo menos 3-5 cap√≠tulos completos`
        },
        {
          role: "user",
          content: "Crie um grim√≥rio sobre 'Os Fundamentos da Filosofia Luciferiana'"
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.8,
      max_tokens: 8000
    });

    const aiResult = JSON.parse(response.choices[0].message.content || '{}');
    console.log('‚úÖ IA gerou:', {
      title: aiResult.title,
      chapters: aiResult.chapters?.length || 0,
      totalWords: aiResult.chapters?.reduce((total, ch) => total + (ch.content?.split(' ').length || 0), 0) || 0
    });

    // 2. Verificar estrutura dos cap√≠tulos
    if (aiResult.chapters && Array.isArray(aiResult.chapters)) {
      console.log('\nüìö Cap√≠tulos gerados:');
      aiResult.chapters.forEach((chapter, index) => {
        console.log(`${index + 1}. ${chapter.title} (${chapter.content?.split(' ').length || 0} palavras)`);
      });
    } else {
      console.error('‚ùå IA n√£o gerou cap√≠tulos v√°lidos');
      return;
    }

    // 3. Criar grim√≥rio no banco
    const totalWordCount = aiResult.chapters.reduce((total, chapter) => {
      return total + (chapter.content ? chapter.content.split(' ').length : 0);
    }, 0);

    const grimoireData = {
      title: aiResult.title,
      description: aiResult.description,
      section_id: 1,
      content: `Grim√≥rio com ${aiResult.chapters.length} cap√≠tulos gerados pela IA`,
      is_paid: false,
      level: aiResult.level || "iniciante",
      word_count: totalWordCount,
      estimated_reading_time: Math.max(5, Math.ceil(totalWordCount / 200)),
      is_published: true
    };

    const { data: newGrimoire, error: grimoireError } = await supabase
      .from('grimoires')
      .insert(grimoireData)
      .select()
      .single();

    if (grimoireError) {
      console.error('‚ùå Erro ao criar grim√≥rio:', grimoireError);
      return;
    }

    console.log('‚úÖ Grim√≥rio criado:', newGrimoire.id, newGrimoire.title);

    // 4. Criar cap√≠tulos individuais
    const createdChapters = [];
    for (let i = 0; i < aiResult.chapters.length; i++) {
      const chapter = aiResult.chapters[i];
      
      if (chapter.title && chapter.content) {
        const chapterData = {
          grimoire_id: newGrimoire.id,
          title: chapter.title,
          content: chapter.content,
          chapter_number: i + 1,
          word_count: chapter.content.split(' ').length
        };
        
        const { data: createdChapter, error: chapterError } = await supabase
          .from('chapters')
          .insert(chapterData)
          .select()
          .single();

        if (chapterError) {
          console.error(`‚ùå Erro ao criar cap√≠tulo ${i + 1}:`, chapterError);
        } else {
          createdChapters.push(createdChapter);
          console.log(`‚úÖ Cap√≠tulo ${i + 1} criado:`, createdChapter.title);
        }
      }
    }

    console.log(`\nüéâ Teste completo! Grim√≥rio com ${createdChapters.length} cap√≠tulos criados com sucesso.`);

  } catch (error) {
    console.error('‚ùå Teste falhado:', error.message);
  }
}

testCompleteAIGeneration();