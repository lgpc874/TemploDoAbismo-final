import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function removeChapterNumbers() {
  try {
    console.log('üßπ Removendo numera√ß√£o dos cap√≠tulos de todos os grim√≥rios...');

    // Buscar TODOS os cap√≠tulos
    const { data: chapters, error } = await supabase
      .from('chapters')
      .select('*')
      .order('grimoire_id', { ascending: true })
      .order('chapter_number', { ascending: true });

    if (error) {
      console.error('Erro ao buscar cap√≠tulos:', error);
      return;
    }

    console.log(`üìö Processando ${chapters.length} cap√≠tulos...`);

    let updatedCount = 0;

    // Padr√µes para remover numera√ß√£o de cap√≠tulos
    const numberPatterns = [
      // Cap√≠tulo com n√∫meros
      /^Cap√≠tulo\s*\d+\s*[-‚Äì‚Äî:]\s*/i,
      /^Cap\.\s*\d+\s*[-‚Äì‚Äî:]\s*/i,
      /^Chapter\s*\d+\s*[-‚Äì‚Äî:]\s*/i,
      
      // N√∫meros romanos
      /^Cap√≠tulo\s*[IVX]+\s*[-‚Äì‚Äî:]\s*/i,
      /^Cap\.\s*[IVX]+\s*[-‚Äì‚Äî:]\s*/i,
      
      // Apenas n√∫meros no in√≠cio
      /^\d+\s*[-‚Äì‚Äî:\.]\s*/,
      /^[IVX]+\s*[-‚Äì‚Äî:\.]\s*/,
      
      // N√∫meros ordinais em portugu√™s
      /^Primeiro\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Segundo\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Terceiro\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Quarto\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Quinto\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Sexto\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^S√©timo\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Oitavo\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^Nono\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      /^D√©cimo\s*Cap√≠tulo\s*[-‚Äì‚Äî:]\s*/i,
      
      // Vers√µes curtas dos ordinais
      /^1¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^2¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^3¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^4¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^5¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^6¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^7¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^8¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^9¬∫\s*[-‚Äì‚Äî:]\s*/,
      /^10¬∫\s*[-‚Äì‚Äî:]\s*/,
      
      // Padr√µes com par√™nteses
      /^\(\d+\)\s*/,
      /^\([IVX]+\)\s*/,
      
      // Espa√ßos e caracteres especiais no in√≠cio
      /^[\s\-‚Äì‚Äî‚Ä¢¬∑]+/
    ];

    // Processar cada cap√≠tulo
    for (const chapter of chapters) {
      let cleanTitle = chapter.title;
      let wasModified = false;

      // Aplicar limpeza sequencial
      for (const pattern of numberPatterns) {
        const beforeClean = cleanTitle;
        cleanTitle = cleanTitle.replace(pattern, '');
        if (beforeClean !== cleanTitle) {
          wasModified = true;
        }
      }

      // Limpar espa√ßos extras e capitalizar primeira letra
      if (wasModified || cleanTitle !== cleanTitle.trim()) {
        cleanTitle = cleanTitle.trim();
        if (cleanTitle.length > 0) {
          cleanTitle = cleanTitle.charAt(0).toUpperCase() + cleanTitle.slice(1);
        }
        wasModified = true;
      }

      // Atualizar no banco se houve modifica√ß√£o significativa
      if (wasModified && cleanTitle !== chapter.title && cleanTitle.length > 0) {
        const { error: updateError } = await supabase
          .from('chapters')
          .update({ title: cleanTitle })
          .eq('id', chapter.id);

        if (updateError) {
          console.error(`Erro ao atualizar cap√≠tulo ${chapter.title}:`, updateError);
        } else {
          console.log(`‚úÖ "${chapter.title}" ‚Üí "${cleanTitle}" (Grim√≥rio: ${chapter.grimoire_id})`);
          updatedCount++;
        }
      }
    }

    console.log(`üî• Remo√ß√£o de numera√ß√£o conclu√≠da! ${updatedCount} t√≠tulos atualizados.`);

  } catch (error) {
    console.error('Erro durante limpeza:', error);
  }
}

removeChapterNumbers();