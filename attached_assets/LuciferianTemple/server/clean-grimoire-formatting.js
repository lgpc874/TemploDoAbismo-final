import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function cleanGrimoireFormatting() {
  try {
    console.log('üßπ Removendo t√≠tulos mystical das cita√ß√µes de abertura...');

    // Buscar todos os cap√≠tulos dos grim√≥rios existentes (exceto o ID 30 que j√° est√° correto)
    const { data: chapters, error } = await supabase
      .from('chapters')
      .select('*')
      .neq('grimoire_id', 30) // Excluir o √∫ltimo criado
      .order('grimoire_id', { ascending: true })
      .order('chapter_number', { ascending: true });

    if (error) {
      console.error('Erro ao buscar cap√≠tulos:', error);
      return;
    }

    console.log(`üìö Encontrados ${chapters.length} cap√≠tulos para limpar`);

    // Mapeamento de t√≠tulos m√≠sticos que devem ser removidos
    const mysticalTitles = [
      'Invoca√ß√£o do Primeiro Fogo',
      'Selo do V√©u Rachado',
      'Despertar da Chama Oculta',
      'Portal das Profundezas Ocultas',
      'Inc√™ndio da Chama Natural',
      'Abertura do Tribunal Silencioso',
      'Chamado Ancestral',
      'Heran√ßa Roubada', 
      'Fogo Interior',
      'Sombra Sagrada',
      'Reino Dentro de Ti'
    ];

    let updatedCount = 0;

    // Limpar formata√ß√£o de cada cap√≠tulo
    for (const chapter of chapters) {
      let cleanedContent = chapter.content;
      let wasModified = false;

      // Remover qualquer t√≠tulo dentro de opening-invocation que corresponda aos padr√µes m√≠sticos
      mysticalTitles.forEach(title => {
        const regex = new RegExp(`<h3[^>]*>${title}<\/h3>\\s*`, 'g');
        if (cleanedContent.includes(title)) {
          cleanedContent = cleanedContent.replace(regex, '');
          wasModified = true;
        }
      });

      // Remover qualquer h3 gen√©rico dentro de opening-invocation
      const h3Pattern = /<div class="opening-invocation">[^<]*<h3[^>]*>[^<]*<\/h3>\s*/g;
      if (h3Pattern.test(cleanedContent)) {
        cleanedContent = cleanedContent.replace(h3Pattern, '<div class="opening-invocation">');
        wasModified = true;
      }

      // Atualizar no banco se houve modifica√ß√£o
      if (wasModified) {
        const { error: updateError } = await supabase
          .from('chapters')
          .update({ content: cleanedContent })
          .eq('id', chapter.id);

        if (updateError) {
          console.error(`Erro ao atualizar cap√≠tulo ${chapter.title}:`, updateError);
        } else {
          console.log(`‚úÖ Cap√≠tulo "${chapter.title}" limpo (Grim√≥rio ID: ${chapter.grimoire_id})`);
          updatedCount++;
        }
      }
    }

    console.log(`üî• Limpeza conclu√≠da! ${updatedCount} cap√≠tulos atualizados para ter apenas nomes dos cap√≠tulos.`);

  } catch (error) {
    console.error('Erro durante limpeza:', error);
  }
}

cleanGrimoireFormatting();